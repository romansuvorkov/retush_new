{"version":3,"sources":["img/example1b.jpg","img/example1a.jpg","logo.svg","components/Header.jsx","components/InfoCards.jsx","components/Slider.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","infoCards","Slider","useState","activeSlide","setActiveSlide","handleClick","numb","src","example1a","example1b","alt","onClick","App","InfoCards","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,0ECA3CD,EAAOC,QAAU,IAA0B,kC,sGCyB5BC,MAvBf,WACE,OACE,4BAAQC,UAAU,eACd,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,SACf,yBAAKA,UAAU,cAAf,kOAEF,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,cAAf,yFACA,yBAAKA,UAAU,aAAf,gJAEF,yBAAKA,UAAU,SACb,+CACA,8CACA,kDACA,sICUGC,MA1Bf,WACE,OACE,yBAAKD,UAAU,cACb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,SACb,0BAAMA,UAAU,kBAAhB,0LAGJ,yBAAKA,UAAU,aACb,yBAAKA,UAAU,SACb,0BAAMA,UAAU,kBAAhB,mJAGJ,yBAAKA,UAAU,aACb,yBAAKA,UAAU,SACX,0BAAMA,UAAU,kBAAhB,0H,uCCYCE,MA1Bf,WAAmB,IAAD,EAEwBC,mBAAS,IAFjC,mBAEPC,EAFO,KAEMC,EAFN,KAIRC,EAAc,SAACC,GACjBF,EAAeE,IAGrB,OACE,yBAAKP,UAAU,oBACX,yBAAKA,UAA2B,IAAhBI,EAAoB,iCAAmC,eACnE,yBAAKI,IAAqB,IAAhBJ,EAAoBK,IAAYC,IAAWV,UAAU,aAAaW,IAAI,yCAAWC,QAAS,kBAAMN,EAAY,OAE1H,yBAAKN,UAA2B,IAAhBI,EAAoB,iCAAmC,eACnE,yBAAKI,IAAqB,IAAhBJ,EAAoBK,IAAYC,IAAWV,UAAU,aAAaW,IAAI,yCAAWC,QAAS,kBAAMN,EAAY,OAE1H,yBAAKN,UAA2B,IAAhBI,EAAoB,iCAAmC,eACnE,yBAAKI,IAAqB,IAAhBJ,EAAoBK,IAAYC,IAAWV,UAAU,aAAaW,IAAI,yCAAWC,QAAS,kBAAMN,EAAY,OAE1H,yBAAKN,UAA2B,IAAhBI,EAAoB,iCAAmC,eACnE,yBAAKI,IAAqB,IAAhBJ,EAAoBK,IAAYC,IAAWV,UAAU,aAAaW,IAAI,yCAAWC,QAAS,kBAAMN,EAAY,S,MCPnHO,MAVf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAACC,EAAD,MACA,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.47467fee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/example1b.916b130a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/example1a.1d000984.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"main_header\">\r\n        <div className=\"visit_card front\">\r\n          <div className=\"logo\"></div>\r\n          <div className=\"card_title\">Ретушь фотографий для гравировки на камне</div>\r\n        </div>\r\n        <div className=\"visit_card back\">\r\n          <div className=\"left\">\r\n            <div className=\"card_title\">Суворкова Ольга</div>\r\n            <div className=\"card_text\">Профессиональный ретушер</div>\r\n          </div>\r\n          <div className=\"right\">\r\n            <div>(404) 456-1259</div>\r\n            <div>apscience.com</div>\r\n            <div>gfm@apscience.com</div>\r\n            <div>Каменск-Уральский</div>\r\n          </div>\r\n        </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction infoCards() {\r\n  return (\r\n    <div className=\"info_cards\">\r\n      <div className=\"info_cards_wrapper\">\r\n        <div className=\"info_card\">\r\n          <div className=\"right\">\r\n            <span className=\"info_card_text\">Готовность в течение 5 рабочих дней</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"info_card\">\r\n          <div className=\"right\">\r\n            <span className=\"info_card_text\">Оплата по факту готовности</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"info_card\">\r\n          <div className=\"right\">\r\n              <span className=\"info_card_text\">Опыт работы более 8 лет</span> \r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default infoCards;","import React, { useState } from 'react';\r\nimport example1b from '../img/example1b.jpg';\r\nimport example1a from '../img/example1a.jpg';\r\n\r\nfunction Slider() {\r\n\r\n    const [activeSlide, setActiveSlide] = useState('');\r\n\r\n    const handleClick = (numb) => {\r\n        setActiveSlide(numb);\r\n    }\r\n\r\n  return (\r\n    <div className=\"slider_container\">\r\n        <div className={activeSlide === 1 ? \"slider_card slider_card_active\" : \"slider_card\"}>\r\n            <img src={activeSlide === 1 ? example1a : example1b} className=\"slider_img\" alt=\"Пример 1\" onClick={() => handleClick(1)}/>\r\n        </div>\r\n        <div className={activeSlide === 2 ? \"slider_card slider_card_active\" : \"slider_card\"}>\r\n            <img src={activeSlide === 2 ? example1a : example1b} className=\"slider_img\" alt=\"Пример 1\" onClick={() => handleClick(2)}/>\r\n        </div>\r\n        <div className={activeSlide === 3 ? \"slider_card slider_card_active\" : \"slider_card\"}>\r\n            <img src={activeSlide === 3 ? example1a : example1b} className=\"slider_img\" alt=\"Пример 1\" onClick={() => handleClick(3)}/>\r\n        </div>\r\n        <div className={activeSlide === 4 ? \"slider_card slider_card_active\" : \"slider_card\"}>\r\n            <img src={activeSlide === 4 ? example1a : example1b} className=\"slider_img\" alt=\"Пример 1\" onClick={() => handleClick(4)}/>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Slider;","import React from 'react';\nimport logo from './logo.svg';\nimport Header from './components/Header';\nimport InfoCards from './components/InfoCards';\nimport Slider from './components/Slider';\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <InfoCards />\n      <Slider />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}